{"name":"Chlorine","tagline":"Parallel Processing Made Simple","body":"# [Chlorine](http://polytonic.github.io/Chlorine/)\r\n[![Build Status](http://img.shields.io/travis/Polytonic/Chlorine.svg?style=flat)](https://travis-ci.org/Polytonic/Chlorine)\r\n[![Coverage Status](http://img.shields.io/coveralls/Polytonic/Chlorine.svg?style=flat)](https://coveralls.io/r/Polytonic/Chlorine)\r\n\r\n## Summary\r\nChlorine is a simple way to interact with OpenCL-enabled devices. You can rapidly *prototype* parallel processing on graphics processing units using a generic worker implementation that abstracts away much of the boilerplate involved with writing OpenCL applications.\r\n\r\n## Getting Started\r\nChlorine is distributed as a single header: [chlorine.hpp](https://github.com/Polytonic/Chlorine/blob/master/chlorine/chlorine.hpp). You'll also need any version of the [OpenCL C++ Bindings](http://www.khronos.org/registry/cl/api/1.1/cl.hpp) and a compiler with `C++11` support.\r\n\r\n**main.cpp**\r\n```c++\r\n// Include the Chlorine Header\r\n#include \"chlorine.hpp\"\r\nint main(int argc, char * argv[])\r\n{\r\n    // Create Some Data\r\n    std::vector<float> spam(10, 3.1415f);\r\n    std::vector<float> eggs(10, 2.7182f);\r\n\r\n    // Initialize a Chlorine Worker\r\n    ch::Worker worker(\"simple.cl\");\r\n\r\n    // Call the Swap Function in the Given Kernel\r\n    worker.execute(\"swap\", spam, eggs);\r\n\r\n    // Host Containers Are Automatically Updated\r\n    std::cout << \"Spam: \" << spam[0] << \"\\n\"; // 2.7182\r\n    std::cout << \"Eggs: \" << eggs[0] << \"\\n\"; // 3.1415\r\n}\r\n```\r\n**simple.cl**\r\n```c\r\n__kernel void swap(__global float * spam, __global float * eggs)\r\n{\r\n    unsigned int i = get_global_id(0);\r\n    float swap = spam[i];\r\n    spam[i] = eggs[i];\r\n    eggs[i] = swap;\r\n}\r\n```\r\n\r\n## Documentation\r\nThe Chlorine Worker takes care of mapping arguments passed on the host to kernel functions on the device. The underlying implementation uses variadic templating to accept any number of arguments of any type, allowing you to mix primitives and vector types as needed. The following types are supported:\r\n\r\n- [Arithmetic Primitives](http://www.cplusplus.com/reference/type_traits/is_arithmetic/)\r\n- [C-Style Arrays](http://www.cplusplus.com/doc/tutorial/arrays/)\r\n- [STL Arrays](http://www.cplusplus.com/reference/array/array/)\r\n- [STL Valarrays](http://www.cplusplus.com/reference/valarray/)\r\n- [STL Vectors](http://www.cplusplus.com/reference/vector/vector/)\r\n\r\nNote that kernels may not automatically perform type promotion. When working with floating point numbers, be sure to use the appropriate literal. For instance, `3.14` vs. `3.14f`.\r\n\r\n## License\r\n```\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Kevin Fung\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}